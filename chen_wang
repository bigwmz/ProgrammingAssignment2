##Assignment: Caching the Inverse of a Matrix

##Matrix inversion is usually a costly computation and there may be some benefit to caching 
##the inverse of a matrix rather than compute it repeatedly.

## this one will generate a matrix object which can cache its inverse. 

makeCacheMatrix <- function(x = matrix()) {
    invs <- NULL
    set <- function(y) {
        x <<- y
        invs <<- NULL
    }
    get <- function() x
    setInverse <- function(inverse) invs <<- inverse
    getInverse <- function() invs
    list(set = set,
         get = get,
         setInverse = setInverse,
         getInverse = getInverse)
}


## This function computes the inverse of the matrix generated above.

cacheSolve <- function(x, ...) {
    ## Return a matrix that is the inverse of 'x'
    invs <- x$getInverse()
    if (!is.null(invs)) {
        message("loading")
        return(invs)
    }
    mat <- x$get()
    invs <- solve(mat, ...)
    x$setInverse(invs)
    invs
}
